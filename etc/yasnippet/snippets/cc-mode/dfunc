# -*- mode: snippet -*-
# name: static int Module_Function(void)...
# key: dfunc
# --
dox$0
${1:static }${2:int}${2:$(unless (string= (substring yas-text -1 nil) "*") " ")}${3:Module_FunctionName}(${4:void})
{${5:${2:$(unless (string-match apm-c-void-regex yas-text) (concatenate 'string "
  " yas-text (if (string= (substring yas-text -1 nil) "*") "" " ")"Ret = 0;"))}}
  d_fnstart(${6:$$(yas-choose-value '("D_EMERG" "D_ALERT" "D_CRIT" "D_ERR" "D_WARN" "D_NOTICE" "D_INFO" "D_DEBUG" "D_TEST" "D_VERBOSE" "D_IRQ" "D_ALL"))}, ${7:NULL}, "(${8:${4:$(mapconcat 'identity (apm-c-get-function-param-formats yas-text) ", ")}})\n"${4:$(mapconcat 'identity (append '("") (apm-c-get-function-param-names yas-text)) ", ")});

  // do some stuff

  d_fnend($6, $7, "($8)${10:${5:$(let ((fmt (apm-c-type-to-format (apm-c-get-variable-type-from-declaration yas-text)))) (if fmt (concatenate 'string " = " fmt) ""))}}\n"${4:$(mapconcat 'identity (append '("") (apm-c-get-function-param-names yas-text)) ", ")}${5:$(let ((name (apm-c-get-variable-name-from-declaration yas-text))) (when name (concatenate 'string ", " name)))});${5:$(let ((name (apm-c-get-variable-name-from-declaration yas-text))) (when name (concatenate 'string "
  return " name ";")))}
}
