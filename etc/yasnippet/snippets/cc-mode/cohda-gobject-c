# -*- mode: snippet; require-final-newline: nil -*-
# name: cohda-gobject-c
# key: cohda-gobject-c
# --
#include "${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`}.h"

struct ${2:${1:$(apm-camelize (replace-regexp-in-string "-" "_" yas-text))}}
{
  ${3:GObject} Parent;
};

struct $2Class
{
  $3Class ParentClass;
};

typedef struct $2Private t$2Private;

struct $2Private
{
  gint Foo;
};

G_DEFINE_TYPE_WITH_PRIVATE(t$2, $2, ${4:G_TYPE_OBJECT});

enum
{
  PROP_0,
  NUM_PROPERTIES
};

static GParamSpec *ppProperties[NUM_PROPERTIES] = { NULL, };

t$2 *
$2_New(void)
{
  return g_object_new(${1:$(let* ((parts (split-string yas-text "-"))) (concat (upcase (first parts)) "_TYPE_" (mapconcat 'identity (mapcar '(lambda (word) (upcase word)) (rest (split-string yas-text "-"))) "_")))}, NULL);
}

static void
$2_Finalize(GObject *pObject)
{
  t$2Private *pPriv = $2_get_instance_private(${1:$(upcase (replace-regexp-in-string "-" "_" yas-text))}(pObject));

  // TODO: remove this - keep compiler happy
  (void)pPriv;

  G_OBJECT_CLASS($2_parent_class)->finalize(pObject);
}

static void
$2_GetProperty(GObject *pObject,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}guint PropId,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}GValue *pValue,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}GParamSpec *pPSpec)
{
${2:$(concat " " " ") ;; worst hack ever since 2 spaces doesn't actually seem to indent properly}t$2 *pSelf = ${1:$(upcase (replace-regexp-in-string "-" "_" yas-text))}(pObject);

  // TODO: remove this - keep compiler happy
  (void)pSelf;

  switch (PropId)
  {
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID(pObject, PropId, pPSpec);
  }
}

static void
$2_SetProperty(GObject *pObject,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}guint PropId,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}const GValue *pValue,
${2:$(replace-regexp-in-string "[a-z_]" " " yas-text) ;; hack since doesn't indent right otherwise}GParamSpec *pPSpec)
{
${2:$(concat " " " ") ;; worst hack ever since 2 spaces doesn't actually seem to indent properly}t$2 *pSelf = ${1:$(upcase (replace-regexp-in-string "-" "_" yas-text))}(pObject);

  // TODO: remove this - keep compiler happy
  (void)pSelf;

  switch (PropId)
  {
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID(pObject, PropId, pPSpec);
  }
}

static void
$2_class_init(t$2Class *pClass)
{
  GObjectClass *pObjectClass = G_OBJECT_CLASS(pClass);

  pObjectClass->finalize = $2_Finalize;
  pObjectClass->get_property = $2_GetProperty;
  pObjectClass->set_property = $2_SetProperty;
}

static void
$2_init(t$2 *pSelf)
{
  t$2Private *pPriv = $2_get_instance_private(pSelf);

  // TODO: initialise object
  (void)pPriv;
}
