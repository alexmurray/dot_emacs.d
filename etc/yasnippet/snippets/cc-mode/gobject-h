# -*- mode: snippet; require-final-newline: nil -*-
# name: gobject-h
# key: gobject-h
# --
#ifndef __${1:`(replace-regexp-in-string "-" "_" (upcase (file-name-nondirectory (file-name-sans-extension (buffer-file-name)))))`$$(upcase yas-text)}_H__
#define __$1_H__

#include <glib-object.h>

G_BEGIN_DECLS

#define ${1:$(let* ((parts (split-string yas-text "_"))) (concat (first parts) "_TYPE_" (mapconcat 'identity (rest parts) "_")))} (${1:$(downcase yas-text)}_get_type())
#define $1(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), ${1:$(let* ((parts (split-string yas-text "_"))) (concat (first parts) "_TYPE_" (mapconcat 'identity (rest parts) "_")))}, $2))
#define ${1:$(let* ((parts (split-string yas-text "_"))) (concat (first parts) "_IS_" (mapconcat 'identity (rest parts) "_")))}(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), ${1:$(let* ((parts (split-string yas-text "_"))) (concat (first parts) "_TYPE_" (mapconcat 'identity (rest parts) "_")))}))

typedef struct _$2         ${2:${1:$(apm-camelize yas-text)}};
typedef struct _$2Class    $2Class;

struct _$2
{
  ${3:GObject} parent;
};

struct _$2Class
{
  $3Class parent_class;
};

GType ${1:$(downcase yas-text)}_get_type(void);
$2 *${1:$(downcase yas-text)}_new(void);

G_END_DECLS

#endif /* __$1_H__ */
